levels(x) <- c(levels(x), "Unknown")
}
x[is.na(x)] <- "Unknown"
}
return(x)
})
return(df)
}
remove_outliers <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
x[x < (Q1 - 1.5 * IQR) | x > (Q3 + 1.5 * IQR)] <- NA
}
return(x)
})
return(df)
}
normalize_data <- function(df) {
numeric_columns <- sapply(df, is.numeric)
df[numeric_columns] <- scale(df[numeric_columns])
return(df)
}
# Assurez-vous que caret est installé
install.packages("caret")
library(caret)
balance_classes <- function(df) {
# Convertir la variable de sortie en facteur si ce n'est pas déjà fait
df$Résultats_des_tests <- as.factor(df$Résultats_des_tests)
# Paramétrage du contrôle SMOTE
train_control <- trainControl(method = "cv", number = 10, sampling = "smote")
# Application de SMOTE à la base de données
balanced_data <- train(Résultats_des_tests ~ ., data = df, method = "rpart", trControl = train_control)
# Retourner le jeu de données équilibré
return(balanced_data)
}
dummy_variables <- function(df) {
df <- dummyVars(~., data = df) %>% predict(newdata = df)
df <- as.data.frame(df)
return(df)
}
preprocess_data <- function(df) {
df <- identify_and_transform_variable_types(df)$data
df <- handle_missing_values(df)
df <- remove_outliers(df)
df <- normalize_data(df)
df <- balance_classes(df)
df <- dummy_variables(df)
return(df)
}
head(df, 100)
install.packages("ggplot2", version = "3.3.5")
library(caret)
suppressPackageStartupMessages(library(ggplot2))
identify_and_transform_variable_types <- function(df) {
df <- as.data.frame(df)  # S'assurer que c'est bien un DataFrame
# Appliquer la transformation pour les variables catégorielles
df <- df %>%
mutate(across(everything(), ~ {
if (is.character(.) || (is.numeric(.) && length(unique(.)) <= 10)) {
as.factor(.)  # Transforme les variables en facteurs si elles sont qualitatives
} else {
.  # Sinon, on laisse la variable inchangée
}
}))
return(df)  # Retourner uniquement le DataFrame transformé
}
handle_missing_values <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
} else if (is.factor(x) | is.character(x)) {
if (is.factor(x)) {
# Ajouter un niveau pour "Unknown" si ce n'est pas déjà un niveau
levels(x) <- c(levels(x), "Unknown")
}
x[is.na(x)] <- "Unknown"
}
return(x)
})
return(df)
}
remove_outliers <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
x[x < (Q1 - 1.5 * IQR) | x > (Q3 + 1.5 * IQR)] <- NA
}
return(x)
})
return(df)
}
normalize_data <- function(df) {
numeric_columns <- sapply(df, is.numeric)
df[numeric_columns] <- scale(df[numeric_columns])
return(df)
}
# Assurez-vous que caret est installé
install.packages("caret")
library(caret)
balance_classes <- function(df) {
# Convertir la variable de sortie en facteur si ce n'est pas déjà fait
df$Résultats_des_tests <- as.factor(df$Résultats_des_tests)
# Paramétrage du contrôle SMOTE
train_control <- trainControl(method = "cv", number = 10, sampling = "smote")
# Application de SMOTE à la base de données
balanced_data <- train(Résultats_des_tests ~ ., data = df, method = "rpart", trControl = train_control)
# Retourner le jeu de données équilibré
return(balanced_data)
}
dummy_variables <- function(df) {
df <- dummyVars(~., data = df) %>% predict(newdata = df)
df <- as.data.frame(df)
return(df)
}
preprocess_data <- function(df) {
df <- identify_and_transform_variable_types(df)$data
df <- handle_missing_values(df)
df <- remove_outliers(df)
df <- normalize_data(df)
df <- balance_classes(df)
df <- dummy_variables(df)
return(df)
}
head(df, 100)
install.packages("caret")
packageVersion("ggplot2")
# Chargement des bibliothèques nécessaires
set.seed(120)  # Pour la reproductibilité
library(dplyr)
# Liste des valeurs possibles pour certaines colonnes
genders <- c("Homme", "Femme")
blood_types <- c("A+", "A-", "B+", "B-", "O+", "O-", "AB+", "AB-")
medical_conditions <- c("Diabète", "Hypertension", "Asthme", "Cancer", "Maladies cardiaques", "Anémie")
doctors <- c("Dr. Smith", "Dr. Johnson", "Dr. Williams", "Dr. Brown", "Dr. Jones")
hospitals <- c("Hôpital A", "Hôpital B", "Hôpital C", "Hôpital D")
insurance_providers <- c("Aetna", "Blue Cross", "Cigna", "UnitedHealthcare", "Medicare")
medications <- c("Aspirine", "Ibuprofène", "Pénicilline", "Paracétamol", "Lipitor")
test_results <- c("Normal", "Anormal", "Non concluant")
# Fonction pour générer les données synthétiques
generate_data <- function(num_records) {
data <- data.frame(
Nom = replicate(num_records, paste0(sample(letters, 10, replace = TRUE), collapse = "")),
Âge = sample(13:89, num_records, replace = TRUE),
Sexe = sample(genders, num_records, replace = TRUE),
Groupe_sanguin = sample(blood_types, num_records, replace = TRUE),
État_médical = sample(medical_conditions, num_records, replace = TRUE),
Date_d_admission = sample(seq(as.Date("2010-01-01"), as.Date("2024-01-01"), by="day"), num_records, replace = TRUE),
Médecin = sample(doctors, num_records, replace = TRUE),
Hôpital = sample(hospitals, num_records, replace = TRUE),
Fournisseur_d_assurance = sample(insurance_providers, num_records, replace = TRUE),
Montant_facturé = round(runif(num_records, min = 1000, max = 50000), 2),
Numéro_de_chambre = sample(101:500, num_records, replace = TRUE),
Type_d_admission = sample(c("Urgence", "Électif", "Urgent"), num_records, replace = TRUE),
Date_de_sortie = sample(seq(as.Date("2010-01-01"), as.Date("2024-01-01"), by="day"), num_records, replace = TRUE),
Médicament = sample(medications, num_records, replace = TRUE),
Résultats_des_tests = sample(test_results, num_records, replace = TRUE)
)
return(data)
}
# Générer 50 000 lignes de données
num_records <- 50000
df <- generate_data(num_records)
# Introduction de valeurs manquantes de manière aléatoire dans certaines colonnes
set_missing_values <- function(df, missing_rate = 0.05) {
num_rows <- nrow(df)
num_missing <- floor(num_rows * missing_rate)
# Colonnes où les valeurs peuvent être manquantes
cols_with_missing <- c("État_médical", "Date_d_admission", "Numéro_de_chambre", "Montant_facturé")
for (col in cols_with_missing) {
missing_indices <- sample(1:num_rows, num_missing)
df[missing_indices, col] <- NA
}
return(df)
}
df <- set_missing_values(df, missing_rate = 0.05)
# Introduction d'outliers dans la colonne 'Montant_facturé'
introduce_outliers <- function(df, outlier_rate = 0.02) {
num_rows <- nrow(df)
num_outliers <- floor(num_rows * outlier_rate)
# Sélection de quelques indices pour les outliers
outlier_indices <- sample(1:num_rows, num_outliers)
df$Montant_facturé[outlier_indices] <- df$Montant_facturé[outlier_indices] * 10  # Valeurs aberrantes
return(df)
}
df <- introduce_outliers(df, outlier_rate = 0.02)
# Déséquilibre des classes dans la colonne 'État_médical'
introduce_class_imbalance <- function(df) {
state_imbalance <- c("Normal" = 0.7, "Anormal" = 0.2, "Non concluant" = 0.1)
df$Résultats_des_tests <- sample(names(state_imbalance), nrow(df), replace = TRUE, prob = state_imbalance)
return(df)
}
df <- introduce_class_imbalance(df)
# Sélection d'une partie de l'échantillon pour l'analyse dans le R Markdown
df <- df[1:1000, ]
# Afficher un résumé du dataset
summary(df)
packageVersion("caret")
library(caret)
suppressPackageStartupMessages(library(ggplot2))
identify_and_transform_variable_types <- function(df) {
df <- as.data.frame(df)  # S'assurer que c'est bien un DataFrame
# Appliquer la transformation pour les variables catégorielles
df <- df %>%
mutate(across(everything(), ~ {
if (is.character(.) || (is.numeric(.) && length(unique(.)) <= 10)) {
as.factor(.)  # Transforme les variables en facteurs si elles sont qualitatives
} else {
.  # Sinon, on laisse la variable inchangée
}
}))
return(df)  # Retourner uniquement le DataFrame transformé
}
handle_missing_values <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
} else if (is.factor(x) | is.character(x)) {
if (is.factor(x)) {
# Ajouter un niveau pour "Unknown" si ce n'est pas déjà un niveau
levels(x) <- c(levels(x), "Unknown")
}
x[is.na(x)] <- "Unknown"
}
return(x)
})
return(df)
}
remove_outliers <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
x[x < (Q1 - 1.5 * IQR) | x > (Q3 + 1.5 * IQR)] <- NA
}
return(x)
})
return(df)
}
normalize_data <- function(df) {
numeric_columns <- sapply(df, is.numeric)
df[numeric_columns] <- scale(df[numeric_columns])
return(df)
}
# Assurez-vous que caret est installé
install.packages("caret")
library(caret)
balance_classes <- function(df) {
# Convertir la variable de sortie en facteur si ce n'est pas déjà fait
df$Résultats_des_tests <- as.factor(df$Résultats_des_tests)
# Paramétrage du contrôle SMOTE
train_control <- trainControl(method = "cv", number = 10, sampling = "smote")
# Application de SMOTE à la base de données
balanced_data <- train(Résultats_des_tests ~ ., data = df, method = "rpart", trControl = train_control)
# Retourner le jeu de données équilibré
return(balanced_data)
}
dummy_variables <- function(df) {
df <- dummyVars(~., data = df) %>% predict(newdata = df)
df <- as.data.frame(df)
return(df)
}
preprocess_data <- function(df) {
df <- identify_and_transform_variable_types(df)$data
df <- handle_missing_values(df)
df <- remove_outliers(df)
df <- normalize_data(df)
df <- balance_classes(df)
df <- dummy_variables(df)
return(df)
}
head(df, 100)
library(caret)
library(data.table)
suppressPackageStartupMessages(library(ggplot2))
identify_and_transform_variable_types <- function(df) {
df <- as.data.frame(df)  # S'assurer que c'est bien un DataFrame
# Appliquer la transformation pour les variables catégorielles
df <- df %>%
mutate(across(everything(), ~ {
if (is.character(.) || (is.numeric(.) && length(unique(.)) <= 10)) {
as.factor(.)  # Transforme les variables en facteurs si elles sont qualitatives
} else {
.  # Sinon, on laisse la variable inchangée
}
}))
return(df)  # Retourner uniquement le DataFrame transformé
}
handle_missing_values <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
} else if (is.factor(x) | is.character(x)) {
if (is.factor(x)) {
# Ajouter un niveau pour "Unknown" si ce n'est pas déjà un niveau
levels(x) <- c(levels(x), "Unknown")
}
x[is.na(x)] <- "Unknown"
}
return(x)
})
return(df)
}
remove_outliers <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
x[x < (Q1 - 1.5 * IQR) | x > (Q3 + 1.5 * IQR)] <- NA
}
return(x)
})
return(df)
}
normalize_data <- function(df) {
numeric_columns <- sapply(df, is.numeric)
df[numeric_columns] <- scale(df[numeric_columns])
return(df)
}
# Assurez-vous que caret est installé
install.packages("caret")
library(caret)
balance_classes <- function(df) {
# Convertir la variable de sortie en facteur si ce n'est pas déjà fait
df$Résultats_des_tests <- as.factor(df$Résultats_des_tests)
# Paramétrage du contrôle SMOTE
train_control <- trainControl(method = "cv", number = 10, sampling = "smote")
# Application de SMOTE à la base de données
balanced_data <- train(Résultats_des_tests ~ ., data = df, method = "rpart", trControl = train_control)
# Retourner le jeu de données équilibré
return(balanced_data)
}
dummy_variables <- function(df) {
df <- dummyVars(~., data = df) %>% predict(newdata = df)
df <- as.data.frame(df)
return(df)
}
preprocess_data <- function(df) {
df <- identify_and_transform_variable_types(df)$data
df <- handle_missing_values(df)
df <- remove_outliers(df)
df <- normalize_data(df)
df <- balance_classes(df)
df <- dummy_variables(df)
return(df)
}
head(df, 100)
install.packages("data.table")
packageVersion("data.table")
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggplot2))
identify_and_transform_variable_types <- function(df) {
df <- as.data.frame(df)  # S'assurer que c'est bien un DataFrame
# Appliquer la transformation pour les variables catégorielles
df <- df %>%
mutate(across(everything(), ~ {
if (is.character(.) || (is.numeric(.) && length(unique(.)) <= 10)) {
as.factor(.)  # Transforme les variables en facteurs si elles sont qualitatives
} else {
.  # Sinon, on laisse la variable inchangée
}
}))
return(df)  # Retourner uniquement le DataFrame transformé
}
handle_missing_values <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
} else if (is.factor(x) | is.character(x)) {
if (is.factor(x)) {
# Ajouter un niveau pour "Unknown" si ce n'est pas déjà un niveau
levels(x) <- c(levels(x), "Unknown")
}
x[is.na(x)] <- "Unknown"
}
return(x)
})
return(df)
}
remove_outliers <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
x[x < (Q1 - 1.5 * IQR) | x > (Q3 + 1.5 * IQR)] <- NA
}
return(x)
})
return(df)
}
normalize_data <- function(df) {
numeric_columns <- sapply(df, is.numeric)
df[numeric_columns] <- scale(df[numeric_columns])
return(df)
}
# Assurez-vous que caret est installé
install.packages("caret")
library(caret)
balance_classes <- function(df) {
# Convertir la variable de sortie en facteur si ce n'est pas déjà fait
df$Résultats_des_tests <- as.factor(df$Résultats_des_tests)
# Paramétrage du contrôle SMOTE
train_control <- trainControl(method = "cv", number = 10, sampling = "smote")
# Application de SMOTE à la base de données
balanced_data <- train(Résultats_des_tests ~ ., data = df, method = "rpart", trControl = train_control)
# Retourner le jeu de données équilibré
return(balanced_data)
}
dummy_variables <- function(df) {
df <- dummyVars(~., data = df) %>% predict(newdata = df)
df <- as.data.frame(df)
return(df)
}
preprocess_data <- function(df) {
df <- identify_and_transform_variable_types(df)$data
df <- handle_missing_values(df)
df <- remove_outliers(df)
df <- normalize_data(df)
df <- balance_classes(df)
df <- dummy_variables(df)
return(df)
}
head(df, 100)
packageVersion("caret")
install.packages("caret", version = "6.0-94")
packageVersion("caret")
install.packages("caret", version = "6.0-94")
packageVersion("caret")
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggplot2))
identify_and_transform_variable_types <- function(df) {
df <- as.data.frame(df)  # S'assurer que c'est bien un DataFrame
# Appliquer la transformation pour les variables catégorielles
df <- df %>%
mutate(across(everything(), ~ {
if (is.character(.) || (is.numeric(.) && length(unique(.)) <= 10)) {
as.factor(.)  # Transforme les variables en facteurs si elles sont qualitatives
} else {
.  # Sinon, on laisse la variable inchangée
}
}))
return(df)  # Retourner uniquement le DataFrame transformé
}
handle_missing_values <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
} else if (is.factor(x) | is.character(x)) {
if (is.factor(x)) {
# Ajouter un niveau pour "Unknown" si ce n'est pas déjà un niveau
levels(x) <- c(levels(x), "Unknown")
}
x[is.na(x)] <- "Unknown"
}
return(x)
})
return(df)
}
remove_outliers <- function(df) {
df[] <- lapply(df, function(x) {
if (is.numeric(x)) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
x[x < (Q1 - 1.5 * IQR) | x > (Q3 + 1.5 * IQR)] <- NA
}
return(x)
})
return(df)
}
normalize_data <- function(df) {
numeric_columns <- sapply(df, is.numeric)
df[numeric_columns] <- scale(df[numeric_columns])
return(df)
}
# Assurez-vous que caret est installé
install.packages("caret")
library(caret)
balance_classes <- function(df) {
# Convertir la variable de sortie en facteur si ce n'est pas déjà fait
df$Résultats_des_tests <- as.factor(df$Résultats_des_tests)
# Paramétrage du contrôle SMOTE
train_control <- trainControl(method = "cv", number = 10, sampling = "smote")
# Application de SMOTE à la base de données
balanced_data <- train(Résultats_des_tests ~ ., data = df, method = "rpart", trControl = train_control)
# Retourner le jeu de données équilibré
return(balanced_data)
}
dummy_variables <- function(df) {
df <- dummyVars(~., data = df) %>% predict(newdata = df)
df <- as.data.frame(df)
return(df)
}
preprocess_data <- function(df) {
df <- identify_and_transform_variable_types(df)$data
df <- handle_missing_values(df)
df <- remove_outliers(df)
df <- normalize_data(df)
df <- balance_classes(df)
df <- dummy_variables(df)
return(df)
}
head(df, 100)
